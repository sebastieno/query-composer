@model SampleApp.Models.IndexModel

@Scripts.Render("~/bundles/jquery")
@Html.Partial("_QueryComposer_KoTemplate")

<div class="col-xs-12 main-container fixed-menu">
    <section role="main" id="main">
        <form id="sampleForm">
            <h3>Critères de recherche :</h3>
            <div class="query-composer" data-bind="template : { name: 'queryComposerTemplate' }">
            </div>

            <br />
            <input type="submit" value="Rechercher" />
        </form>

        <div id="response">
        </div>

        <script type="text/javascript">
            $("#sampleForm").submit(function (e) {
                e.preventDefault();

                $.post("@Url.Action("Index")", $(this).serialize())
                .done(function (data) {
                    $("#response").html(data);
                })
                .error(function (e) {
                    alert("Aïe, une erreur est survenue :( !\n\nMessage:\n" + e.responseJSON.message);
                });
            });

            var statesList = @Html.Raw(Json.Encode(Model.Statuses.Select(s => new { text = s.Name, value = s.Id })));
            var iterationsList = @Html.Raw(Json.Encode(Model.Iterations.Select(s => new { text = s.Name, value = s.Id })));
            var areasList =  @Html.Raw(Json.Encode(Model.Areas.Select(s => new { text = s.Name, value = s.Id })));

            var fieldsDefinition = [
                new QueryComposer.Model.SimpleQueryDefinition(new QueryComposer.Model.TextFieldDefinition("Title", "Titre")),
                new QueryComposer.Model.SimpleQueryDefinition( new QueryComposer.Model.ListFieldDefinition("StatusId", "Statut", statesList)),
                new QueryComposer.Model.SimpleQueryDefinition(new QueryComposer.Model.ListFieldDefinition("IterationId", "Itération", iterationsList)),
                new QueryComposer.Model.SimpleQueryDefinition(new QueryComposer.Model.ListFieldDefinition("AreaId", "Zone", areasList)),
                new QueryComposer.Model.SimpleQueryDefinition( new QueryComposer.Model.ListFieldDefinition("Iteration.Current", "Itération courante", [{ text : 'Oui', value: true }, { text : 'Non', value: false }])),
                new QueryComposer.Model.MultipleQueryDefinition(
                    [new QueryComposer.Model.TextFieldDefinition("Title", "Titre"),
                    new QueryComposer.Model.TextFieldDefinition("StartDate", "Date de début"),
                    new QueryComposer.Model.TextFieldDefinition("EndDate", "Date de fin"),
                    new QueryComposer.Model.ListFieldDefinition("Iteration.Current", "Itération courante", [{ text : 'Oui', value: true }, { text : 'Non', value: false }])])
            ];

            var vm = new QueryComposer.QueriesViewModel(fieldsDefinition, { showNewEmptyLine: true });

            ko.applyBindings(vm, $(".query-component")[0]);
        </script>
    </section>
</div>
